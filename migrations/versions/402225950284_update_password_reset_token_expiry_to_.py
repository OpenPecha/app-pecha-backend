"""update password_reset token_expiry to timezone aware

Revision ID: 402225950284
Revises: 6d6e2057a835
Create Date: 2025-08-30 17:37:03.072742

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '402225950284'
down_revision: Union[str, None] = '6d6e2057a835'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Update password_resets.token_expiry to timezone aware
    op.alter_column('password_resets', 'token_expiry',
                    existing_type=sa.DateTime(),
                    type_=sa.DateTime(timezone=True),
                    existing_nullable=False)
    
    op.create_table('authors',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=200), nullable=False),
    sa.Column('last_name', sa.String(length=200), nullable=False),
    sa.Column('bio', sa.Text(), nullable=True),
    sa.Column('image_url', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_authors_verified', 'authors', ['is_verified'], unique=False, postgresql_where=sa.text('is_verified = TRUE'))
    op.create_index(op.f('ix_authors_email'), 'authors', ['email'], unique=True)
    op.create_table('plans',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('author_id', sa.UUID(), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('featured', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('image_url', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['authors.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_plans_discovery', 'plans', ['tags', 'is_active'], unique=False)
    op.create_index('idx_plans_featured', 'plans', ['featured'], unique=False, postgresql_where=sa.text('featured = TRUE'))
    op.create_index('idx_plans_search', 'plans', [sa.text("to_tsvector('english', title || ' ' || COALESCE(description, ''))")], unique=False, postgresql_using='gin')
    op.create_index('idx_plans_tags', 'plans', ['tags'], unique=False, postgresql_using='gin')
    op.create_table('favorites',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_favorites_user_plan', 'favorites', ['user_id', 'plan_id'], unique=False)
    op.create_table('plan_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('day_number', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('plan_id', 'day_number', name='uq_plan_items_plan_day')
    )
    op.create_index('idx_plan_items_plan_day', 'plan_items', ['plan_id', 'day_number'], unique=False)
    op.create_table('plan_reviews',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('review_text', sa.Text(), nullable=True),
    sa.Column('is_approved', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='chk_plan_reviews_rating'),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'plan_id', name='uq_plan_reviews_user_plan')
    )
    op.create_index('idx_plan_reviews_plan_approved', 'plan_reviews', ['plan_id', 'is_approved'], unique=False, postgresql_where=sa.text('is_approved = TRUE'))
    op.create_index('idx_plan_reviews_rating', 'plan_reviews', ['plan_id', 'rating'], unique=False)
    op.create_table('user_plan_progress',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('plan_id', sa.UUID(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('streak_count', sa.Integer(), nullable=True),
    sa.Column('longest_streak', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('not_started', 'active', 'paused', 'completed', 'abandoned', name='user_plan_status'), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'plan_id', name='uq_user_plan_progress_user_plan')
    )
    op.create_index('idx_user_progress_plan', 'user_plan_progress', ['plan_id'], unique=False)
    op.create_index('idx_user_progress_user_status', 'user_plan_progress', ['user_id', 'status'], unique=False)
    op.create_table('plan_tasks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('plan_item_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.Text(), nullable=True),
    sa.Column('content_type', sa.Enum('text', 'audio', 'video', 'image', 'source_reference', name='content_type'), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('display_order', sa.Integer(), nullable=False),
    sa.Column('estimated_time', sa.Integer(), nullable=True),
    sa.Column('is_required', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['plan_item_id'], ['plan_items.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_tasks_content_type', 'plan_tasks', ['content_type'], unique=False)
    op.create_index('idx_tasks_plan_item_order', 'plan_tasks', ['plan_item_id', 'display_order'], unique=False)
    op.create_table('user_task_completion',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('task_id', sa.UUID(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['task_id'], ['plan_tasks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'task_id', name='uq_user_task_completion')
    )
    op.create_index('idx_user_completion_completed_at', 'user_task_completion', ['completed_at'], unique=False)
    op.create_index('idx_user_completion_user_task', 'user_task_completion', ['user_id', 'task_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_user_completion_user_task', table_name='user_task_completion')
    op.drop_index('idx_user_completion_completed_at', table_name='user_task_completion')
    op.drop_table('user_task_completion')
    op.drop_index('idx_tasks_plan_item_order', table_name='plan_tasks')
    op.drop_index('idx_tasks_content_type', table_name='plan_tasks')
    op.drop_table('plan_tasks')
    op.drop_index('idx_user_progress_user_status', table_name='user_plan_progress')
    op.drop_index('idx_user_progress_plan', table_name='user_plan_progress')
    op.drop_table('user_plan_progress')
    op.drop_index('idx_plan_reviews_rating', table_name='plan_reviews')
    op.drop_index('idx_plan_reviews_plan_approved', table_name='plan_reviews', postgresql_where=sa.text('is_approved = TRUE'))
    op.drop_table('plan_reviews')
    op.drop_index('idx_plan_items_plan_day', table_name='plan_items')
    op.drop_table('plan_items')
    op.drop_index('idx_favorites_user_plan', table_name='favorites')
    op.drop_table('favorites')
    op.drop_index('idx_plans_tags', table_name='plans', postgresql_using='gin')
    op.drop_index('idx_plans_search', table_name='plans', postgresql_using='gin')
    op.drop_index('idx_plans_featured', table_name='plans', postgresql_where=sa.text('featured = TRUE'))
    op.drop_index('idx_plans_discovery', table_name='plans')
    op.drop_table('plans')
    op.drop_index(op.f('ix_authors_email'), table_name='authors')
    op.drop_index('idx_authors_verified', table_name='authors', postgresql_where=sa.text('is_verified = TRUE'))
    op.drop_table('authors')
    
    # Revert password_resets.token_expiry back to non-timezone aware
    op.alter_column('password_resets', 'token_expiry',
                    existing_type=sa.DateTime(timezone=True),
                    type_=sa.DateTime(),
                    existing_nullable=False)
    # ### end Alembic commands ###
